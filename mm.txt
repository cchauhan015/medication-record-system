import React, { useState, useEffect, createContext, useContext } from 'react';
// <script src="https://cdn.tailwindcss.com"></script>
// Custom inline SVG components to replace lucide-react icons
const PlusIcon = ({ size = 20, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M12 5V19M5 12H19" />
  </svg>
);

const EditIcon = ({ size = 18, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M17 3a2.85 2.85 0 0 1 4 4L9 19 2 22l3-7Z" />
    <path d="M18.5 10.5L9 19" />
  </svg>
);

const Trash2Icon = ({ size = 18, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M3 6h18" />
    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
    <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    <line x1="10" x2="10" y1="11" y2="17" />
    <line x1="14" x2="14" y1="11" y2="17" />
  </svg>
);

const SaveIcon = ({ size = 20, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2Z" />
    <polyline points="17 21 17 13 7 13 7 21" />
    <polyline points="7 3 7 8 15 8" />
  </svg>
);

const XCircleIcon = ({ size = 20, className = "", color = "currentColor" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke={color} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="12" cy="12" r="10" />
    <path d="m15 9-6 6" />
    <path d="m9 9 6 6" />
  </svg>
);

const SearchIcon = ({ size = 20, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="11" cy="11" r="8" />
    <path d="m21 21-4.3-4.3" />
  </svg>
);

const FileTextIcon = ({ size = 36, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z" />
    <path d="M14 2v6h6" />
    <path d="M10 9H8" />
    <path d="M16 13H8" />
    <path d="M16 17H8" />
  </svg>
);

const CheckCircleIcon = ({ size = 20, className = "", color = "currentColor" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke={color} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M22 11.08V12a10 10 0 1 1-5.93-8.83" />
    <polyline points="22 4 12 14.01 9 11.01" />
  </svg>
);

const InfoIcon = ({ size = 20, className = "", color = "currentColor" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke={color} strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="12" cy="12" r="10" />
    <line x1="12" x2="12" y1="16" y2="12" />
    <line x1="12" x2="12.01" y1="8" y2="8" />
  </svg>
);

const ArrowUpCircleIcon = ({ size = 24, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <circle cx="12" cy="12" r="10"/>
    <polyline points="16 12 12 8 8 12"/>
    <line x1="12" y1="16" x2="12" y2="8"/>
  </svg>
);

const SettingsIcon = ({ size = 20, className = "" }) => (
  <svg xmlns="http://www.w3.org/2000/svg" width={size} height={size} viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className={className}>
    <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.78 1.25a2 2 0 0 0 .73 2.73l.04.02a2 2 0 0 1 .72 2.07v.1a2 2 0 0 1-.72 2.07l-.04.02a2 2 0 0 0-.73 2.73l.78 1.25a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0  0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.78-1.25a2 2 0 0 0-.73-2.73l-.04-.02a2 2 0 0 1-.72-2.07v-.1a2 2 0 0 1 .72-2.07l.04-.02a2 2 0 0 0 .73-2.73l-.78-1.25a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"/>
    <circle cx="12" cy="12" r="3"/>
  </svg>
);


// --- Translation Data ---
const translations = {
  en: {
    appTitle: "Medication Record System",
    appSubtitle: "Efficiently manage patient medication details locally.",
    editRecord: "Edit Medication Record",
    addRecord: "Add New Medication Record",
    patientName: "Patient Name",
    medication: "Medication",
    dosage: "Dosage",
    date: "Date",
    selectCategory: "Select Category",
    addRecordBtn: "Add Record",
    saveChangesBtn: "Save Changes",
    cancelEditBtn: "Cancel Edit",
    medicationRecords: "Medication Records",
    searchPlaceholder: "Search by patient, medication, or category...",
    noRecordsFound: "No records found. Start by adding a new record!",
    category: "Category",
    confirmDeletion: "Confirm Deletion",
    deleteConfirmationMsg: "Are you sure you want to delete this medication record? This action cannot be undone.",
    cancel: "Cancel",
    delete: "Delete",
    manageCategoriesTitle: "Manage Sentam Categories & Medications",
    addNewCategory: "Add New Category",
    addCategoryPlaceholder: "e.g., Endocrinology",
    addCategoryBtn: "Add Category",
    manageMedications: "Manage Medications",
    selectCategoryToManage: "Select Category to Manage",
    medicationsInCategory: "Medications in \"{categoryName}\"",
    noMedications: "No medications in this category. Add one below!",
    addMedicationPlaceholder: "e.g., Insulin",
    addMedicationBtn: "Add Medication",
    existingCategories: "Existing Categories",
    noCustomCategories: "No custom categories added yet.",
    categoryNameEmpty: "Category name cannot be empty.",
    categoryExists: "Category already exists!",
    medicationNameEmpty: "Medication name cannot be empty.",
    medicationExists: "Medication already exists in this category!",
    selectCategoryFirst: "Please select a category first.",
    cannotDeleteDefaultCategory: "Cannot delete default category.",
    confirmDeleteCategory: "Are you sure you want to delete category \"{categoryName}\"? This will also remove all its medications.",
    confirmDeleteMedication: "Are you sure you want to delete medication \"{medicationName}\" from \"{categoryName}\"?",
    recordUpdated: "Record updated successfully!",
    recordAdded: "Record added successfully!",
    errorSavingRecord: "Error saving record. Please try again.",
    recordDeleted: "Record deleted successfully!",
    errorDeletingRecord: "Error deleting record. Please try again.",
    deletionCancelled: "Deletion cancelled.",
    editCancelled: "Edit cancelled.",
    fillAllFields: "Please fill in all fields.",
    errorLoadingRecords: "Error loading saved records. Data might be corrupted.",
    errorSavingRecords: "Error saving records. Your changes might not be saved.",
    errorLoadingCategories: "Error loading categories. Defaults might be used.",
    errorSavingCategories: "Error saving categories. Your changes might not be saved.",
    // Default category translations
    'Cardiology': 'Cardiology',
    'Pediatrics': 'Pediatrics',
    'General Practice': 'General Practice',
    'Dermatology': 'Dermatology',
    'Fever': 'Fever',
    'Cold': 'Cold',
    'Diarrhea': 'Diarrhea',
    'Vomiting': 'Vomiting',
  },
  gu: {
    appTitle: "દવા રેકોર્ડ સિસ્ટમ",
    appSubtitle: "સ્થાનિક રીતે દર્દીની દવાની વિગતો અસરકારક રીતે મેનેજ કરો.",
    editRecord: "દવા રેકોર્ડ સંપાદિત કરો",
    addRecord: "નવો દવા રેકોર્ડ ઉમેરો",
    patientName: "દર્દીનું નામ",
    medication: "દવા",
    dosage: "ડોઝ",
    date: "તારીખ",
    selectCategory: "શ્રેણી પસંદ કરો",
    addRecordBtn: "રેકોર્ડ ઉમેરો",
    saveChangesBtn: "ફેરફારો સાચવો",
    cancelEditBtn: "સંપાદન રદ કરો",
    medicationRecords: "દવા રેકોર્ડ્સ",
    searchPlaceholder: "દર્દી, દવા અથવા શ્રેણી દ્વારા શોધો...",
    noRecordsFound: "કોઈ રેકોર્ડ મળ્યા નથી. નવો રેકોર્ડ ઉમેરીને શરૂ કરો!",
    category: "શ્રેણી",
    confirmDeletion: "કાઢી નાખવાની પુષ્ટિ કરો",
    deleteConfirmationMsg: "શું તમે ખરેખર આ દવાનો રેકોર્ડ કાઢી નાખવા માંગો છો? આ ક્રિયા પૂર્વવત્ કરી શકાશે નહીં.",
    cancel: "રદ કરો",
    delete: "કાઢી નાખો",
    manageCategoriesTitle: "સેન્ટમ શ્રેણીઓ અને દવાઓ મેનેજ કરો",
    addNewCategory: "નવી શ્રેણી ઉમેરો",
    addCategoryPlaceholder: "દા.ત., એન્ડોક્રિનોલોજી",
    addCategoryBtn: "શ્રેણી ઉમેરો",
    manageMedications: "દવાઓ મેનેજ કરો",
    selectCategoryToManage: "મેનેજ કરવા માટે શ્રેણી પસંદ કરો",
    medicationsInCategory: "\"{categoryName}\" માં દવાઓ",
    noMedications: "આ શ્રેણીમાં કોઈ દવાઓ નથી. નીચે એક ઉમેરો!",
    addMedicationPlaceholder: "દા.ત., ઇન્સ્યુલિન",
    addMedicationBtn: "દવા ઉમેરો",
    existingCategories: "હાલની શ્રેણીઓ",
    noCustomCategories: "હજુ સુધી કોઈ કસ્ટમ શ્રેણીઓ ઉમેરવામાં આવી નથી.",
    categoryNameEmpty: "શ્રેણીનું નામ ખાલી ન હોઈ શકે.",
    categoryExists: "શ્રેણી પહેલાથી જ અસ્તિત્વમાં છે!",
    medicationNameEmpty: "દવાનું નામ ખાલી ન હોઈ શકે.",
    medicationExists: "આ શ્રેણીમાં દવા પહેલાથી જ અસ્તિત્વમાં છે!",
    selectCategoryFirst: "કૃપા કરીને પહેલા એક શ્રેણી પસંદ કરો.",
    cannotDeleteDefaultCategory: "ડિફૉલ્ટ શ્રેણી કાઢી શકાતી નથી.",
    confirmDeleteCategory: "શું તમે ખરેખર શ્રેણી \"{categoryName}\" કાઢી નાખવા માંગો છો? આ તેની બધી દવાઓ પણ દૂર કરશે.",
    confirmDeleteMedication: "શું તમે ખરેખર \"{medicationName}\" ને \"{categoryName}\" માંથી કાઢી નાખવા માંગો છો?",
    recordUpdated: "રેકોર્ડ સફળતાપૂર્વક અપડેટ થયો!",
    recordAdded: "રેકોર્ડ સફળતાપૂર્વક ઉમેરાયો!",
    errorSavingRecord: "રેકોર્ડ સાચવવામાં ભૂલ થઈ. કૃપા કરીને ફરી પ્રયાસ કરો.",
    errorDeletingRecord: "રેકોર્ડ કાઢી નાખવામાં ભૂલ થઈ. કૃપા કરીને ફરી પ્રયાસ કરો.",
    deletionCancelled: "કાઢી નાખવાની ક્રિયા રદ કરવામાં આવી.",
    editCancelled: "સંપાદન રદ કરવામાં આવ્યું.",
    fillAllFields: "કૃપા કરીને બધા ક્ષેત્રો ભરો.",
    errorLoadingRecords: "સાચવેલા રેકોર્ડ લોડ કરવામાં ભૂલ થઈ. ડેટા દૂષિત હોઈ શકે છે.",
    errorSavingRecords: "રેકોર્ડ સાચવવામાં ભૂલ થઈ. તમારા ફેરફારો સાચવવામાં ન આવે તેવી શક્યતા છે.",
    errorLoadingCategories: "શ્રેણીઓ લોડ કરવામાં ભૂલ થઈ. ડિફૉલ્ટનો ઉપયોગ થઈ શકે છે.",
    errorSavingCategories: "શ્રેણીઓ સાચવવામાં ભૂલ થઈ. તમારા ફેરફારો સાચવવામાં ન આવે તેવી શક્યતા છે.",
    // Default category translations
    'Cardiology': 'કાર્ડિયોલોજી',
    'Pediatrics': 'બાળરોગ',
    'General Practice': 'જનરલ પ્રેક્ટિસ',
    'Dermatology': 'ત્વચારોગવિજ્ઞાન',
    'Fever': 'તાવ',
    'Cold': 'સર્દી',
    'Diarrhea': 'ઝાડા',
    'Vomiting': 'ઊલટી',
  },
};

// --- Language Context ---
const LanguageContext = createContext();

const LOCAL_STORAGE_RECORDS_KEY = 'doctorMedicationRecords'; // Key for storing patient records
const LOCAL_STORAGE_CATEGORIES_KEY = 'sentamMedicationCategories'; // Key for storing dynamic categories
const LOCAL_STORAGE_LANGUAGE_KEY = 'appLanguage'; // Key for storing language preference

// Default categories to load if Local Storage is empty
const defaultSentamCategories = {
  'Select Category': [], // This is a special key for the default option.
  'Cardiology': ['Amlodipine', 'Lisinopril', 'Metoprolol', 'Atorvastatin'],
  'Pediatrics': ['Amoxicillin', 'Ibuprofen (Children)', 'Acetaminophen (Children)'],
  'General Practice': ['Paracetamol', 'Ibuprofen', 'Cetirizine', 'Omeprazole'],
  'Dermatology': ['Hydrocortisone Cream', 'Clindamycin Topical', 'Tretinoin'],
  'Fever': ['Paracetamol', 'Ibuprofen'], // તાવ
  'Cold': ['Cetirizine', 'Phenylephrine'], // સર્દી
  'Diarrhea': ['Loperamide', 'ORS'], // ઝાડા
  'Vomiting': ['Domperidone', 'Ondansetron'], // ઊલટી
};

// --- Manage Categories Dialog Component ---
const ManageCategoriesDialog = ({
  isOpen,
  onClose,
  dynamicSentamCategories,
  setDynamicSentamCategories,
  showMessage,
  t
}) => {
  const [newCategoryName, setNewCategoryName] = useState('');
  const [categoryToManage, setCategoryToManage] = useState('Select Category'); // Now managed within dialog
  const [newMedicationName, setNewMedicationName] = useState(''); // Now managed within dialog

  if (!isOpen) return null;

  const handleAddCategory = () => {
    if (newCategoryName.trim() === '') {
      showMessage(t('categoryNameEmpty'), 'error');
      return;
    }
    if (dynamicSentamCategories[newCategoryName.trim()]) {
      showMessage(t('categoryExists'), 'error');
      return;
    }
    setDynamicSentamCategories(prevCategories => ({
      ...prevCategories,
      [newCategoryName.trim()]: []
    }));
    showMessage(`Category "${newCategoryName.trim()}" ${t('recordAdded')}`, 'success');
    setNewCategoryName('');
  };

  const handleDeleteCategory = (categoryName) => {
    if (categoryName === 'Select Category') {
      showMessage(t('cannotDeleteDefaultCategory'), 'error');
      return;
    }
    if (!window.confirm(t('confirmDeleteCategory', { categoryName }))) {
        return;
    }
    setDynamicSentamCategories(prevCategories => {
      const newCategories = { ...prevCategories };
      delete newCategories[categoryName];
      // Reset selections if the deleted category was active within the dialog
      if (categoryToManage === categoryName) {
        setCategoryToManage('Select Category');
        setNewMedicationName('');
      }
      return newCategories;
    });
    showMessage(`Category "${categoryName}" ${t('recordDeleted')}`, 'success');
  };

  const handleAddMedication = () => {
    if (categoryToManage === 'Select Category') {
      showMessage(t('selectCategoryFirst'), 'error');
      return;
    }
    if (newMedicationName.trim() === '') {
      showMessage(t('medicationNameEmpty'), 'error');
      return;
    }
    const currentMedications = dynamicSentamCategories[categoryToManage];
    if (currentMedications && currentMedications.includes(newMedicationName.trim())) {
      showMessage(t('medicationExists'), 'error');
      return;
    }

    setDynamicSentamCategories(prevCategories => ({
      ...prevCategories,
      [categoryToManage]: [...(prevCategories[categoryToManage] || []), newMedicationName.trim()]
    }));
    showMessage(`Medication "${newMedicationName.trim()}" ${t('recordAdded')} to "${categoryToManage}"!`, 'success');
    setNewMedicationName('');
  };

  const handleDeleteMedication = (categoryName, medicationName) => {
    if (!window.confirm(t('confirmDeleteMedication', { medicationName, categoryName }))) {
        return;
    }
    setDynamicSentamCategories(prevCategories => ({
      ...prevCategories,
      [categoryName]: prevCategories[categoryName].filter(med => med !== medicationName)
    }));
    showMessage(`Medication "${medicationName}" ${t('recordDeleted')} from "${categoryName}"!`, 'success');
  };

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-xl shadow-2xl p-6 sm:p-8 w-full max-w-2xl transform transition-all duration-300 scale-100 opacity-100">
        <div className="flex justify-between items-center mb-6">
          <h3 className="text-2xl font-bold text-gray-800">{t('manageCategoriesTitle')}</h3>
          <button
            onClick={onClose}
            className="p-2 rounded-full bg-gray-200 text-gray-600 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-75 transition duration-200 ease-in-out"
            aria-label={t('cancel')}
            title={t('cancel')}
          >
            <XCircleIcon size={24} />
          </button>
        </div>

        {/* Add Category */}
        <div className="mb-8 p-6 border border-blue-200 rounded-lg bg-blue-50">
          <h3 className="text-xl font-semibold text-blue-700 mb-4">{t('addNewCategory')}</h3>
          <div className="flex flex-col sm:flex-row gap-3">
            <input
              type="text"
              className="flex-grow p-3 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out"
              placeholder={t('addCategoryPlaceholder')}
              value={newCategoryName}
              onChange={(e) => setNewCategoryName(e.target.value)}
              aria-label={t('addCategoryPlaceholder')}
            />
            <button
              onClick={handleAddCategory}
              className="px-5 py-2 rounded-full bg-blue-600 text-white font-semibold shadow-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-75 transition duration-300 ease-in-out"
            >
              <PlusIcon size={20} /> {t('addCategoryBtn')}
            </button>
          </div>
        </div>

        {/* Existing Categories List */}
        <div className="mt-8 p-6 border border-yellow-200 rounded-lg bg-yellow-50">
          <h4 className="text-xl font-semibold text-yellow-700 mb-3">{t('existingCategories')}</h4>
          {Object.keys(dynamicSentamCategories).filter(cat => cat !== 'Select Category').length > 0 ? (
              <div className="scrollable-medication-list mb-4 border border-gray-200 rounded-lg p-3 bg-white shadow-inner">
                  <ul className="divide-y divide-gray-100">
                      {Object.keys(dynamicSentamCategories).filter(cat => cat !== 'Select Category').map(category => (
                          <li key={`cat-dialog-${category}`} className="flex justify-between items-center py-2 text-gray-700">
                              <span>{t(category)}</span>
                              <button
                                  onClick={() => handleDeleteCategory(category)}
                                  className="p-1 rounded-full bg-red-400 text-white shadow-sm hover:bg-red-500 transition duration-200"
                                  aria-label={t('delete')}
                                  title={t('delete')}
                              >
                                  <Trash2Icon size={16} />
                              </button>
                          </li>
                      ))}
                  </ul>
              </div>
          ) : (
              <p className="text-gray-500 italic">{t('noCustomCategories')}</p>
          )}
        </div>

        {/* Manage Medications within a Category - MOVED HERE */}
        <div className="p-6 border border-purple-200 rounded-lg bg-purple-50 mt-8">
            <h3 className="text-xl font-semibold text-purple-700 mb-4">{t('manageMedications')}</h3>
            <div className="mb-4">
              <label htmlFor="categoryToManage" className="block text-gray-700 text-sm font-medium mb-2">{t('selectCategoryToManage')}</label>
              <select
                id="categoryToManage"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-transparent transition duration-200 ease-in-out bg-white"
                value={categoryToManage}
                onChange={(e) => setCategoryToManage(e.target.value)}
                aria-label={t('selectCategoryToManage')}
              >
                <option value="Select Category">{t('selectCategory')}</option>
                {Object.keys(dynamicSentamCategories).filter(cat => cat !== 'Select Category').map(category => (
                  <option key={`manage-med-dialog-${category}`} value={category}>{t(category)}</option>
                ))}
              </select>
            </div>

            {categoryToManage !== 'Select Category' && (
              <div>
                <h4 className="text-lg font-medium text-gray-800 mb-3">{t('medicationsInCategory', { categoryName: t(categoryToManage) })}</h4>
                {dynamicSentamCategories[categoryToManage] && dynamicSentamCategories[categoryToManage].length > 0 ? (
                  <div className="scrollable-medication-list mb-4 border border-gray-200 rounded-lg p-3 bg-white shadow-inner">
                    <ul className="divide-y divide-gray-100">
                      {dynamicSentamCategories[categoryToManage].map(med => (
                        <li key={med} className="flex justify-between items-center py-2 text-gray-700">
                          <span>{med}</span>
                          <button
                            onClick={() => handleDeleteMedication(categoryToManage, med)}
                            className="p-1 rounded-full bg-red-400 text-white shadow-sm hover:bg-red-500 transition duration-200"
                            aria-label={t('delete')}
                            title={t('delete')}
                          >
                            <Trash2Icon size={16} />
                          </button>
                        </li>
                      ))}
                    </ul>
                  </div>
                ) : (
                  <p className="text-gray-500 italic mb-4">{t('noMedications')}</p>
                )}

                <div className="flex flex-col sm:flex-row gap-3 mt-4">
                  <input
                    type="text"
                    className="flex-grow p-3 border border-purple-300 rounded-lg focus:ring-2 focus:ring-purple-400 focus:border-transparent transition duration-200 ease-in-out"
                    placeholder={t('addMedicationPlaceholder')}
                    value={newMedicationName}
                    onChange={(e) => setNewMedicationName(e.target.value)}
                    aria-label={t('addMedicationPlaceholder')}
                  />
                  <button
                    onClick={handleAddMedication}
                    className="px-5 py-2 rounded-full bg-purple-600 text-white font-semibold shadow-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-opacity-75 transition duration-300 ease-in-out"
                  >
                    <PlusIcon size={20} /> {t('addMedicationBtn')}
                  </button>
                </div>
              </div>
            )}
          </div>
        <div className="flex justify-end mt-6">
          <button
            onClick={onClose}
            className="px-6 py-3 rounded-full bg-indigo-600 text-white font-semibold shadow-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-75 transition duration-300 ease-in-out"
          >
            {t('cancel')}
          </button>
        </div>
      </div>
    </div>
  );
};


const App = () => {
  const [currentLanguage, setCurrentLanguage] = useState(() => {
    return localStorage.getItem(LOCAL_STORAGE_LANGUAGE_KEY) || 'en';
  });
  const t = (key, params = {}) => {
    let text = translations[currentLanguage][key] || key; // Fallback to key if translation not found
    for (const param in params) {
      text = text.replace(`{${param}}`, params[param]);
    }
    return text;
  };

  const [patientName, setPatientName] = useState('');
  const [selectedSentamCategory, setSelectedSentamCategory] = useState('Select Category');
  const [selectedMedication, setSelectedMedication] = useState('');
  const [dosage, setDosage] = useState('');
  const [recordDate, setRecordDate] = useState(new Date().toISOString().split('T')[0]);
  const [records, setRecords] = useState([]);
  const [editingRecordId, setEditingRecordId] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [recordToDelete, setRecordToDelete] = useState(null);
  const [message, setMessage] = useState({ text: '', type: '' });

  // States for dynamic category/medication management
  const [dynamicSentamCategories, setDynamicSentamCategories] = useState(defaultSentamCategories);
  // These states are now managed within the dialog:
  // const [newCategoryName, setNewCategoryName] = useState('');
  // const [categoryToManage, setCategoryToManage] = useState('Select Category');
  // const [newMedicationName, setNewMedicationName] = useState('');
  const [showScrollToTop, setShowScrollToTop] = useState(false);
  const [showManageCategoriesDialog, setShowManageCategoriesDialog] = useState(false); // New state for dialog visibility


  // Load records from Local Storage on initial component mount
  useEffect(() => {
    try {
      const storedRecords = localStorage.getItem(LOCAL_STORAGE_RECORDS_KEY);
      if (storedRecords) {
        const parsedRecords = JSON.parse(storedRecords).map(record => ({
          ...record,
          recordDate: record.recordDate || new Date().toISOString().split('T')[0],
          sentamCategory: record.sentamCategory || 'Select Category'
        }));
        const sortedRecords = parsedRecords.sort((a, b) => new Date(b.recordDate) - new Date(a.recordDate));
        setRecords(sortedRecords);
      }
    } catch (error) {
      console.error("Error loading records from Local Storage:", error);
      showMessage(t('errorLoadingRecords'), 'error');
    }
  }, []);

  // Save records to Local Storage whenever the 'records' state changes
  useEffect(() => {
    try {
      localStorage.setItem(LOCAL_STORAGE_RECORDS_KEY, JSON.stringify(records));
    } catch (error) {
      console.error("Error saving records to Local Storage:", error);
      showMessage(t('errorSavingRecords'), 'error');
    }
  }, [records]);

  // Load dynamic categories from Local Storage on initial component mount
  useEffect(() => {
    try {
      const storedCategories = localStorage.getItem(LOCAL_STORAGE_CATEGORIES_KEY);
      if (storedCategories) {
        setDynamicSentamCategories(JSON.parse(storedCategories));
      } else {
        // If no categories are stored, initialize with default ones
        localStorage.setItem(LOCAL_STORAGE_CATEGORIES_KEY, JSON.stringify(defaultSentamCategories));
      }
    } catch (error) {
      console.error("Error loading categories from Local Storage:", error);
      showMessage(t('errorLoadingCategories'), 'error');
    }
  }, []); // Run only once on mount

  // Save dynamic categories to Local Storage whenever the 'dynamicSentamCategories' state changes
  useEffect(() => {
    try {
      localStorage.setItem(LOCAL_STORAGE_CATEGORIES_KEY, JSON.stringify(dynamicSentamCategories));
    } catch (error) {
      console.error("Error saving categories to Local Storage:", error);
      showMessage(t('errorSavingCategories'), 'error');
    }
  }, [dynamicSentamCategories]); // This effect runs every time 'dynamicSentamCategories' state is updated

  // Save language preference to Local Storage whenever currentLanguage changes
  useEffect(() => {
    localStorage.setItem(LOCAL_STORAGE_LANGUAGE_KEY, currentLanguage);
  }, [currentLanguage]);

  // Reset medication when Sentam Category changes in the record form
  useEffect(() => {
    setSelectedMedication('');
    // Also ensure the selected category is still valid after potential category deletions
    if (!dynamicSentamCategories[selectedSentamCategory]) {
        setSelectedSentamCategory('Select Category');
    }
  }, [selectedSentamCategory, dynamicSentamCategories]); // Added dynamicSentamCategories as dependency

  // Scroll to Top button visibility
  useEffect(() => {
    const handleScroll = () => {
      if (window.scrollY > 200) { // Show button after scrolling 200px
        setShowScrollToTop(true);
      } else {
        setShowScrollToTop(false);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };


  const showMessage = (text, type) => {
    setMessage({ text, type });
    setTimeout(() => setMessage({ text: '', type: '' }), 3000);
  };

  const handleAddRecord = () => {
    // Check if 'Select Category' is chosen using its translated string for validation
    if (!patientName || selectedSentamCategory === 'Select Category' || !selectedMedication || !dosage || !recordDate) {
      showMessage(t('fillAllFields'), 'error');
      return;
    }

    if (editingRecordId) {
      setRecords(records.map(record =>
        record.id === editingRecordId
          ? { ...record, patientName, sentamCategory: selectedSentamCategory, medication: selectedMedication, dosage, recordDate, timestamp: new Date().toISOString() }
          : record
      ));
      showMessage(t('recordUpdated'), 'success');
      setEditingRecordId(null);
    } else {
      const newRecord = {
        id: crypto.randomUUID(),
        patientName,
        sentamCategory: selectedSentamCategory,
        medication: selectedMedication,
        dosage,
        recordDate,
        timestamp: new Date().toISOString()
      };
      setRecords([newRecord, ...records].sort((a, b) => new Date(b.recordDate) - new Date(a.recordDate)));
      showMessage(t('recordAdded'), 'success');
    }

    setPatientName('');
    setSelectedSentamCategory('Select Category');
    setSelectedMedication('');
    setDosage('');
    setRecordDate(new Date().toISOString().split('T')[0]);
  };

  const handleEdit = (record) => {
    setEditingRecordId(record.id);
    setPatientName(record.patientName);
    setSelectedSentamCategory(record.sentamCategory || 'Select Category');
    setSelectedMedication(record.medication);
    setDosage(record.dosage);
    setRecordDate(record.recordDate);
    showMessage(t('editCancelled'), 'info'); // Using 'info' for editing mode message
  };

  const handleDeleteClick = (recordId) => {
    setRecordToDelete(recordId);
    setShowConfirmation(true);
  };

  const confirmDelete = () => {
    if (!recordToDelete) return;

    setRecords(records.filter(record => record.id !== recordToDelete));
    showMessage(t('recordDeleted'), 'success');

    setShowConfirmation(false);
    setRecordToDelete(null);
  };

  const cancelDelete = () => {
    setShowConfirmation(false);
    setRecordToDelete(null);
    showMessage(t('deletionCancelled'), 'info');
  };

  const handleCancelEdit = () => {
    setEditingRecordId(null);
    setPatientName('');
    setSelectedSentamCategory('Select Category');
    setSelectedMedication('');
    setDosage('');
    setRecordDate(new Date().toISOString().split('T')[0]);
    showMessage(t('editCancelled'), 'info');
  };

  // --- Dynamic Medication Management Functions (These are now handled by the dialog's internal state/functions) ---
  // The original handleAddMedication and handleDeleteMedication are now inside ManageCategoriesDialog

  const filteredRecords = records.filter(record =>
    record.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||
    record.medication.toLowerCase().includes(searchTerm.toLowerCase()) ||
    // Filter by the stored category name, which might be in English or Gujarati
    record.sentamCategory.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <LanguageContext.Provider value={{ currentLanguage, setCurrentLanguage, t }}>
      <div className="min-h-screen bg-gradient-to-br from-blue-100 to-indigo-200 p-4 font-sans flex flex-col items-center">
        {/* Tailwind CSS Script - Always include this for Tailwind to work */}
        <script src="https://cdn.tailwindcss.com"></script>
        {/* Ensure Inter font is available */}
        <style>
          {`
            @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
            body { font-family: 'Inter', sans-serif; }
            .scrollable-list {
              max-height: 500px; /* Adjust as needed */
              overflow-y: auto;
              -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
            }
            .scrollable-medication-list {
              max-height: 200px; /* Adjust as needed */
              overflow-y: auto;
              -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
            }
            /* Custom styling for improved focus states and touch targets */
            button, select, input[type="text"], input[type="date"] {
              touch-action: manipulation; /* Improves responsiveness for touch events */
              min-height: 44px; /* Recommended touch target size */
            }
            button:focus, select:focus, input:focus {
              outline: 2px solid theme('colors.blue.500'); /* Clear focus indicator */
              outline-offset: 2px;
            }
            @media (max-width: 768px) {
              .header-title {
                font-size: 2.25rem; /* text-4xl equivalent on smaller screens */
              }
              .header-subtitle {
                font-size: 1rem; /* text-lg equivalent on smaller screens */
              }
              .section-heading {
                font-size: 1.75rem; /* text-3xl equivalent on smaller screens */
              }
              .button-group {
                flex-direction: column; /* Stack buttons on small screens */
                gap: 1rem;
              }
              .button-group button {
                width: 100%;
              }
              .record-item-actions {
                flex-direction: column;
                gap: 0.5rem;
                align-items: flex-end; /* Align buttons to the right */
              }
            }
          `}
        </style>

        {/* Language Switcher and Message Box */}
        <div className="fixed top-4 right-4 md:top-6 md:right-6 flex flex-col-reverse md:flex-row items-end md:items-center space-y-2 md:space-y-0 space-x-0 md:space-x-4 z-50">
            {message.text && (
            <div className={`p-3 rounded-lg shadow-lg flex items-center space-x-2 w-full md:w-auto
                ${message.type === 'success' ? 'bg-green-500 text-white' : ''}
                ${message.type === 'error' ? 'bg-red-500 text-white' : ''}
                ${message.type === 'info' ? 'bg-blue-500 text-white' : ''}
            `}>
                {message.type === 'success' && <CheckCircleIcon size={20} />}
                {message.type === 'error' && <XCircleIcon size={20} />}
                {message.type === 'info' && <InfoIcon size={20} />}
                <span>{message.text}</span>
            </div>
            )}
            <select
                className="p-2 rounded-lg bg-white border border-gray-300 shadow-md min-w-[120px] text-sm md:text-base"
                value={currentLanguage}
                onChange={(e) => setCurrentLanguage(e.target.value)}
                aria-label="Select Language"
            >
                <option value="en">English</option>
                <option value="gu">ગુજરાતી</option>
            </select>
        </div>


        {/* Confirmation Modal */}
        {showConfirmation && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-xl shadow-2xl p-6 w-full max-w-sm transform transition-all duration-300 scale-100 opacity-100">
              <h3 className="text-xl font-semibold text-gray-800 mb-4">{t('confirmDeletion')}</h3>
              <p className="text-gray-600 mb-6">{t('deleteConfirmationMsg')}</p>
              <div className="flex justify-end space-x-3">
                <button
                  onClick={cancelDelete}
                  className="px-5 py-2 rounded-full bg-gray-200 text-gray-700 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-400 focus:ring-opacity-75 transition duration-200 ease-in-out"
                >
                  {t('cancel')}
                </button>
                <button
                  onClick={confirmDelete}
                  className="px-5 py-2 rounded-full bg-red-600 text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-75 transition duration-200 ease-in-out"
                >
                  {t('delete')}
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Manage Categories Dialog */}
        <ManageCategoriesDialog
          isOpen={showManageCategoriesDialog}
          onClose={() => setShowManageCategoriesDialog(false)}
          dynamicSentamCategories={dynamicSentamCategories}
          setDynamicSentamCategories={setDynamicSentamCategories}
          showMessage={showMessage}
          t={t}
        />

        <header className="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-6 sm:p-8 mb-8 mt-12 md:mt-8 text-center">
          <h1 className="header-title text-3xl sm:text-4xl font-bold text-indigo-700 mb-2 flex flex-col sm:flex-row items-center justify-center gap-2 sm:gap-3">
            <FileTextIcon size={32} className="text-blue-500 sm:size-36" /> {/* Responsive icon size */}
            {t('appTitle')}
          </h1>
          <p className="header-subtitle text-base sm:text-lg text-gray-600">{t('appSubtitle')}</p>
        </header>

        {/* Input Form */}
        <section className="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-6 sm:p-8 mb-8">
          <h2 className="section-heading text-2xl sm:text-3xl font-semibold text-indigo-600 mb-6 text-center">
            {editingRecordId ? t('editRecord') : t('addRecord')}
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 sm:gap-6 mb-6">
            <div>
              <label htmlFor="patientName" className="block text-gray-700 text-sm font-medium mb-2">{t('patientName')}</label>
              <input
                type="text"
                id="patientName"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out"
                value={patientName}
                onChange={(e) => setPatientName(e.target.value)}
                placeholder={t('patientName')}
                aria-label={t('patientName')}
                required
              />
            </div>
            <div>
              <label htmlFor="sentamSelect" className="block text-gray-700 text-sm font-medium mb-2">Sentam {t('category')}</label>
              <div className="flex gap-2"> {/* Flex container for select and button */}
                <select
                  id="sentamSelect"
                  className="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out bg-white"
                  value={selectedSentamCategory}
                  onChange={(e) => setSelectedSentamCategory(e.target.value)}
                  aria-label={`Sentam ${t('category')}`}
                  required
                >
                  {Object.keys(dynamicSentamCategories).map(category => (
                    <option key={category} value={category}>{t(category)}</option>
                  ))}
                </select>
                <button
                  onClick={() => setShowManageCategoriesDialog(true)}
                  className="p-3 rounded-lg bg-indigo-500 text-white shadow-sm hover:bg-indigo-600 focus:outline-none focus:ring-2 focus:ring-indigo-400 focus:ring-opacity-75 transition duration-200"
                  aria-label={t('manageCategoriesTitle')}
                  title={t('manageCategoriesTitle')}
                >
                  <SettingsIcon size={20} />
                </button>
              </div>
            </div>
            <div>
              <label htmlFor="medication" className="block text-gray-700 text-sm font-medium mb-2">{t('medication')}</label>
              <select
                id="medication"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out bg-white"
                value={selectedMedication}
                onChange={(e) => setSelectedMedication(e.target.value)}
                disabled={selectedSentamCategory === 'Select Category' || dynamicSentamCategories[selectedSentamCategory]?.length === 0}
                aria-label={t('medication')}
                required
              >
                <option value="">{t('selectCategory')}</option>
                {dynamicSentamCategories[selectedSentamCategory] && dynamicSentamCategories[selectedSentamCategory].map(med => (
                  <option key={med} value={med}>{med}</option>
                ))}
              </select>
            </div>
            <div>
              <label htmlFor="dosage" className="block text-gray-700 text-sm font-medium mb-2">{t('dosage')}</label>
              <input
                type="text"
                id="dosage"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out"
                value={dosage}
                onChange={(e) => setDosage(e.target.value)}
                placeholder={t('dosage')}
                aria-label={t('dosage')}
                required
              />
            </div>
            <div>
              <label htmlFor="recordDate" className="block text-gray-700 text-sm font-medium mb-2">{t('date')}</label>
              <input
                type="date"
                id="recordDate"
                className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out"
                value={recordDate}
                onChange={(e) => setRecordDate(e.target.value)}
                aria-label={t('date')}
                required
              />
            </div>
          </div>
          <div className="button-group flex justify-center gap-4 mt-6">
            <button
              onClick={handleAddRecord}
              className={`flex items-center justify-center px-6 py-3 rounded-full text-white font-semibold shadow-md transition duration-300 ease-in-out
                ${editingRecordId ? 'bg-green-600 hover:bg-green-700 focus:ring-green-500' : 'bg-blue-600 hover:bg-blue-700 focus:ring-blue-500'}
                focus:outline-none focus:ring-2 focus:ring-opacity-75`}
            >
              {editingRecordId ? <SaveIcon size={20} className="mr-2" /> : <PlusIcon size={20} className="mr-2" />}
              {editingRecordId ? t('saveChangesBtn') : t('addRecordBtn')}
            </button>
            {editingRecordId && (
              <button
                onClick={handleCancelEdit}
                className="flex items-center justify-center px-6 py-3 rounded-full bg-red-500 text-white font-semibold shadow-md hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-75 transition duration-300 ease-in-out"
              >
                <XCircleIcon size={20} className="mr-2" />
                {t('cancelEditBtn')}
              </button>
            )}
          </div>
        </section>

        {/* Removed the dedicated Manage Medications section from App as it's now in the dialog */}
        {/*
        <section className="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-6 sm:p-8 mb-8">
          <h2 className="section-heading text-2xl sm:text-3xl font-semibold text-indigo-600 mb-6 text-center">{t('manageMedications')}</h2>
          // ... rest of the removed section ...
        </section>
        */}

        {/* Search and Records List */}
        <section className="w-full max-w-4xl bg-white rounded-2xl shadow-xl p-6 sm:p-8">
          <h2 className="section-heading text-2xl sm:text-3xl font-semibold text-indigo-600 mb-6 text-center">{t('medicationRecords')}</h2>
          <div className="mb-6 flex items-center justify-center">
            <div className="relative w-full max-w-md">
              <input
                type="text"
                className="w-full p-3 pl-10 border border-gray-300 rounded-full focus:ring-2 focus:ring-blue-400 focus:border-transparent transition duration-200 ease-in-out"
                placeholder={t('searchPlaceholder')}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                aria-label={t('searchPlaceholder')}
              />
              <SearchIcon size={20} className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-500" />
            </div>
          </div>

          {filteredRecords.length === 0 ? (
            <p className="text-center text-gray-500 text-lg mt-8">{t('noRecordsFound')}</p>
          ) : (
            <div className="scrollable-list border border-gray-200 rounded-lg divide-y divide-gray-200 shadow-inner">
              {filteredRecords.map((record) => (
                <div key={record.id} className="p-5 hover:bg-gray-50 transition duration-150 ease-in-out">
                  <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-2">
                    <h3 className="text-xl font-bold text-gray-800 flex items-center gap-2">
                      {record.patientName} <span className="text-sm font-normal text-indigo-500 ml-2">({new Date(record.recordDate).toLocaleDateString(currentLanguage)})</span>
                    </h3>
                    <div className="record-item-actions flex flex-wrap gap-2 mt-3 md:mt-0">
                      <button
                        onClick={() => handleEdit(record)}
                        className="p-2 rounded-full bg-yellow-400 text-white shadow-sm hover:bg-yellow-500 focus:outline-none focus:ring-2 focus:ring-yellow-300 focus:ring-opacity-75 transition duration-200"
                        aria-label={t('editRecord')}
                        title={t('editRecord')}
                      >
                        <EditIcon size={18} />
                      </button>
                      <button
                        onClick={() => handleDeleteClick(record.id)}
                        className="p-2 rounded-full bg-red-500 text-white shadow-sm hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-75 transition duration-200"
                        aria-label={t('delete')}
                        title={t('delete')}
                      >
                        <Trash2Icon size={18} />
                      </button>
                    </div>
                  </div>
                  <p className="text-gray-700 text-lg mb-1"><span className="font-semibold">{t('category')}:</span> {t(record.sentamCategory)}</p>
                  <p className="text-gray-700 text-lg mb-1"><span className="font-semibold">{t('medication')}:</span> {record.medication}</p>
                  <p className="text-gray-600"><span className="font-semibold">{t('dosage')}:</span> {record.dosage}</p>
                </div>
              ))}
            </div>
          )}
        </section>

        <footer className="w-full max-w-4xl text-center text-gray-500 text-sm mt-12 py-4 border-t border-gray-300">
          &copy; {new Date().getFullYear()} Doctor Sentam. All rights reserved.
        </footer>

        {showScrollToTop && (
          <button
            onClick={scrollToTop}
            className="fixed bottom-6 right-6 p-3 bg-indigo-600 text-white rounded-full shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-75 transition duration-300"
            aria-label="Scroll to top"
            title="Scroll to Top"
          >
            <ArrowUpCircleIcon size={24} />
          </button>
        )}
      </div>
    </LanguageContext.Provider>
  );
};

export default App;
